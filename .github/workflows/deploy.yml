name: Deploy to GitHub Pages

on:
  workflow_run:
    workflows: ["CI"]
    branches: [main]
    types:
      - completed

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  deploy:
    if: github.event.workflow_run.conclusion == 'success'
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
      contents: read
      actions: read
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: room-planner-build
          run-id: ${{ github.event.workflow_run.id }}
          repository: ${{ github.repository }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path: ./build

      - name: Verify PWA deployment files
        run: |
          echo "Checking downloaded build artifacts..."
          ls -la ./build/
          echo "Verifying critical PWA files exist..."
          test -f ./build/manifest.webmanifest || (echo "ERROR: manifest.webmanifest not found" && exit 1)
          test -f ./build/ngsw.json || (echo "ERROR: ngsw.json not found" && exit 1)
          test -f ./build/ngsw-worker.js || (echo "ERROR: ngsw-worker.js not found" && exit 1)
          echo "Verifying optional PWA files..."
          if [ -d ./build/.well-known ]; then
            echo "‚úÖ .well-known directory found"
            ls -la ./build/.well-known/
          else
            echo "‚ö†Ô∏è  WARNING: .well-known directory not found (Chrome DevTools support disabled)"
          fi
          echo "PWA files verification complete!"

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: "./build"

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Verify PWA deployment
        run: |
          echo "üöÄ PWA deployed successfully!"
          echo "üì± PWA URL: ${{ steps.deployment.outputs.page_url }}"
          echo "üîß Install the PWA by visiting the URL and clicking the install button"
          echo "üìã PWA Features available:"
          echo "  ‚úÖ Offline functionality"
          echo "  ‚úÖ Service Worker caching"
          echo "  ‚úÖ Install prompt"
          echo "  ‚úÖ App manifest"
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
